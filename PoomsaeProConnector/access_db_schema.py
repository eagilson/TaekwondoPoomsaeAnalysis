# used to pull the Database Schema
# not needed for general analysis
# generated by Grok3

import subprocess
import re

def get_tables(mdb_file):
    """Retrieve list of tables from the Access database using mdb-tables."""
    try:
        result = subprocess.run(['mdb-tables', '-1', mdb_file], capture_output=True, text=True, check=True)
        tables = result.stdout.strip().split('\n')
        return [table for table in tables if table]  # Filter out empty strings
    except subprocess.CalledProcessError as e:
        print(f"Error retrieving tables: {e}")
        return []

def get_column_info(mdb_file, table):
    """Retrieve column names and data types for a given table using mdb-schema."""
    try:
        result = subprocess.run(['mdb-schema', mdb_file], capture_output=True, text=True, check=True)
        schema = result.stdout
        with open("output.txt", "a") as f:
            print(schema, file=f)

        # Normalize schema by removing extra whitespace and newlines
        schema = ' '.join(schema.split())

        # Find the table definition in the schema output
        # Using a more flexible regex to handle variations in schema formatting
        table_pattern = rf'CREATE TABLE\s*(?:\[|\")*{re.escape(table)}(?:\]|\")*\s*\((.*?)\)(?:\s*;|,)'
        match = re.search(table_pattern, schema, re.DOTALL | re.IGNORECASE)
        if not match:
            print(f"No schema found for table: {table}")
            return []

        columns_section = match.group(1).strip()
        columns = []

        # Split columns by comma, handling potential nested commas in constraints
        column_lines = []
        current_column = ""
        in_constraint = False
        for char in columns_section:
            if char == ',' and not in_constraint:
                column_lines.append(current_column.strip())
                current_column = ""
            else:
                current_column += char
                if char == '(':
                    in_constraint = True
                elif char == ')':
                    in_constraint = False
        if current_column.strip():
            column_lines.append(current_column.strip())

        # Process each column definition
        for line in column_lines:
            # Skip constraints (e.g., PRIMARY KEY, FOREIGN KEY)
            if any(keyword in line.upper() for keyword in ['PRIMARY KEY', 'FOREIGN KEY', 'CONSTRAINT']):
                continue

            # Match column name and data type (e.g., [ColumnName] DataType or "ColumnName" DataType)
            column_match = re.match(r'\[?\"?([^\]\"]+)\]?\"?\s+([^\s,\(]+)', line, re.IGNORECASE)
            if column_match:
                column_name = column_match.group(1).strip('[]\"')
                data_type = column_match.group(2).strip()
                columns.append((column_name, data_type))

        return columns
    except subprocess.CalledProcessError as e:
        print(f"Error retrieving schema for table {table}: {e}")
        return []

def main(mdb_file):
    """Main function to process the Access database and print column info."""
    tables = get_tables(mdb_file)
    if not tables:
        print("No tables found in the database or an error occurred.")
        return

    for table in tables:
        print(f"\nTable: {table}")
        print("-" * 40)
        columns = get_column_info(mdb_file, table)
        if columns:
            print(f"{'Column Name':<30} {'Data Type':<20}")
            print("-" * 40)
            for column_name, data_type in columns:
                print(f"{column_name:<30} {data_type:<20}")
        else:
            print(f"No columns found for table {table}.")

if __name__ == "__main__":
    # Replace with the path to your Access database file
    database_file = "data/2024 USATKD Nationals/Friday - PP_ScoresV2c_be.accdb"
    main(database_file)